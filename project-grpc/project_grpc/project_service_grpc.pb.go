// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: project_service.proto

package project_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectService_Index_FullMethodName                 = "/proto.ProjectService/Index"
	ProjectService_FindProjectByMemberId_FullMethodName = "/proto.ProjectService/FindProjectByMemberId"
	ProjectService_FindProjectTemplate_FullMethodName   = "/proto.ProjectService/FindProjectTemplate"
	ProjectService_CreateProject_FullMethodName         = "/proto.ProjectService/CreateProject"
	ProjectService_FindProjectDetail_FullMethodName     = "/proto.ProjectService/FindProjectDetail"
	ProjectService_RecycleProjectByPid_FullMethodName   = "/proto.ProjectService/RecycleProjectByPid"
	ProjectService_CollectProjectByType_FullMethodName  = "/proto.ProjectService/CollectProjectByType"
	ProjectService_EditProject_FullMethodName           = "/proto.ProjectService/EditProject"
	ProjectService_GetLogBySelfProject_FullMethodName   = "/proto.ProjectService/GetLogBySelfProject"
	ProjectService_CopyProjectTemplate_FullMethodName   = "/proto.ProjectService/CopyProjectTemplate"
	ProjectService_NodeList_FullMethodName              = "/proto.ProjectService/NodeList"
	ProjectService_FindProjectByMid_FullMethodName      = "/proto.ProjectService/FindProjectByMid"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	Index(ctx context.Context, in *IndexMessage, opts ...grpc.CallOption) (*IndexResponse, error)
	FindProjectByMemberId(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	FindProjectTemplate(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectTemplateResponse, error)
	CreateProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*SaveProjectResponse, error)
	FindProjectDetail(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectDetailResponse, error)
	RecycleProjectByPid(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*IndexMessage, error)
	CollectProjectByType(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*CollectProjectResponse, error)
	EditProject(ctx context.Context, in *ProjectEditRequest, opts ...grpc.CallOption) (*ProjectEditResponse, error)
	GetLogBySelfProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectLogResponse, error)
	CopyProjectTemplate(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*CopyProjectTemplateResponse, error)
	NodeList(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectNodeResponseMessage, error)
	FindProjectByMid(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*FindProjectByMemberIdResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) Index(ctx context.Context, in *IndexMessage, opts ...grpc.CallOption) (*IndexResponse, error) {
	out := new(IndexResponse)
	err := c.cc.Invoke(ctx, ProjectService_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectByMemberId(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectByMemberId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectTemplate(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectTemplateResponse, error) {
	out := new(ProjectTemplateResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*SaveProjectResponse, error) {
	out := new(SaveProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectDetail(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectDetailResponse, error) {
	out := new(ProjectDetailResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RecycleProjectByPid(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*IndexMessage, error) {
	out := new(IndexMessage)
	err := c.cc.Invoke(ctx, ProjectService_RecycleProjectByPid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CollectProjectByType(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*CollectProjectResponse, error) {
	out := new(CollectProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_CollectProjectByType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) EditProject(ctx context.Context, in *ProjectEditRequest, opts ...grpc.CallOption) (*ProjectEditResponse, error) {
	out := new(ProjectEditResponse)
	err := c.cc.Invoke(ctx, ProjectService_EditProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetLogBySelfProject(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectLogResponse, error) {
	out := new(ProjectLogResponse)
	err := c.cc.Invoke(ctx, ProjectService_GetLogBySelfProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CopyProjectTemplate(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*CopyProjectTemplateResponse, error) {
	out := new(CopyProjectTemplateResponse)
	err := c.cc.Invoke(ctx, ProjectService_CopyProjectTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) NodeList(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectNodeResponseMessage, error) {
	out := new(ProjectNodeResponseMessage)
	err := c.cc.Invoke(ctx, ProjectService_NodeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectByMid(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*FindProjectByMemberIdResponse, error) {
	out := new(FindProjectByMemberIdResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectByMid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	Index(context.Context, *IndexMessage) (*IndexResponse, error)
	FindProjectByMemberId(context.Context, *ProjectRequest) (*ProjectResponse, error)
	FindProjectTemplate(context.Context, *ProjectRequest) (*ProjectTemplateResponse, error)
	CreateProject(context.Context, *ProjectRequest) (*SaveProjectResponse, error)
	FindProjectDetail(context.Context, *ProjectRequest) (*ProjectDetailResponse, error)
	RecycleProjectByPid(context.Context, *ProjectRequest) (*IndexMessage, error)
	CollectProjectByType(context.Context, *ProjectRequest) (*CollectProjectResponse, error)
	EditProject(context.Context, *ProjectEditRequest) (*ProjectEditResponse, error)
	GetLogBySelfProject(context.Context, *ProjectRequest) (*ProjectLogResponse, error)
	CopyProjectTemplate(context.Context, *ProjectRequest) (*CopyProjectTemplateResponse, error)
	NodeList(context.Context, *ProjectRequest) (*ProjectNodeResponseMessage, error)
	FindProjectByMid(context.Context, *ProjectRequest) (*FindProjectByMemberIdResponse, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) Index(context.Context, *IndexMessage) (*IndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectByMemberId(context.Context, *ProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectByMemberId not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectTemplate(context.Context, *ProjectRequest) (*ProjectTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectTemplate not implemented")
}
func (UnimplementedProjectServiceServer) CreateProject(context.Context, *ProjectRequest) (*SaveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectDetail(context.Context, *ProjectRequest) (*ProjectDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectDetail not implemented")
}
func (UnimplementedProjectServiceServer) RecycleProjectByPid(context.Context, *ProjectRequest) (*IndexMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleProjectByPid not implemented")
}
func (UnimplementedProjectServiceServer) CollectProjectByType(context.Context, *ProjectRequest) (*CollectProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectProjectByType not implemented")
}
func (UnimplementedProjectServiceServer) EditProject(context.Context, *ProjectEditRequest) (*ProjectEditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditProject not implemented")
}
func (UnimplementedProjectServiceServer) GetLogBySelfProject(context.Context, *ProjectRequest) (*ProjectLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogBySelfProject not implemented")
}
func (UnimplementedProjectServiceServer) CopyProjectTemplate(context.Context, *ProjectRequest) (*CopyProjectTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyProjectTemplate not implemented")
}
func (UnimplementedProjectServiceServer) NodeList(context.Context, *ProjectRequest) (*ProjectNodeResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeList not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectByMid(context.Context, *ProjectRequest) (*FindProjectByMemberIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectByMid not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Index(ctx, req.(*IndexMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectByMemberId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectByMemberId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectByMemberId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectByMemberId(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectTemplate(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectDetail(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RecycleProjectByPid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RecycleProjectByPid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_RecycleProjectByPid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RecycleProjectByPid(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CollectProjectByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CollectProjectByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CollectProjectByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CollectProjectByType(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_EditProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).EditProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_EditProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).EditProject(ctx, req.(*ProjectEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetLogBySelfProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetLogBySelfProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetLogBySelfProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetLogBySelfProject(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CopyProjectTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CopyProjectTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CopyProjectTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CopyProjectTemplate(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_NodeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).NodeList(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectByMid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectByMid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectByMid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectByMid(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _ProjectService_Index_Handler,
		},
		{
			MethodName: "FindProjectByMemberId",
			Handler:    _ProjectService_FindProjectByMemberId_Handler,
		},
		{
			MethodName: "FindProjectTemplate",
			Handler:    _ProjectService_FindProjectTemplate_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "FindProjectDetail",
			Handler:    _ProjectService_FindProjectDetail_Handler,
		},
		{
			MethodName: "RecycleProjectByPid",
			Handler:    _ProjectService_RecycleProjectByPid_Handler,
		},
		{
			MethodName: "CollectProjectByType",
			Handler:    _ProjectService_CollectProjectByType_Handler,
		},
		{
			MethodName: "EditProject",
			Handler:    _ProjectService_EditProject_Handler,
		},
		{
			MethodName: "GetLogBySelfProject",
			Handler:    _ProjectService_GetLogBySelfProject_Handler,
		},
		{
			MethodName: "CopyProjectTemplate",
			Handler:    _ProjectService_CopyProjectTemplate_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _ProjectService_NodeList_Handler,
		},
		{
			MethodName: "FindProjectByMid",
			Handler:    _ProjectService_FindProjectByMid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project_service.proto",
}
